      include "box.usrp"
c-----------------------------------------------------------------------
      subroutine userflux  (fluxout)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE' ! probably want to start following nek convention
                       ! and use this routine pointwise
      real fluxout(lx1*lz1)
      integer e,f,eg

      do i=1,nx1*nz1
         fluxout(i)=0.0 ! adiabatic
      enddo
      return
      end
c-----------------------------------------------------------------------
      subroutine userEOS(ix,iy,iz,eg)
      include 'SIZE'
      include 'NEKUSE'
      include 'PARALLEL'
      include 'CMTDATA'
      include 'PERFECTGAS'
      integer e,eg

      cp=cpgref
      cv=cvgref
      temp=e_internal/cv
      asnd=MixtPerf_C_GRT(gmaref,rgasref,temp)
      pres=MixtPerf_P_DRT(rho,rgasref,temp)
      return
      end
!-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      integer e,eg

      udiff =0.
      utrans=0.
      return
      end
c-----------------------------------------------------------------------
      subroutine userf  (ix,iy,iz,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      integer e,eg

      ffx = 0.0
      ffy = 0.0
      ffz = 0.0
      return
      end
c-----------------------------------------------------------------------
      subroutine userq  (ix,iy,iz,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      integer e,eg

      qvol   = 0.0
      return
      end
c-----------------------------------------------------------------------
      subroutine userchk
      include 'SIZE'  
      include 'TOTAL' 
      include 'CTIMER'
      include 'CMTTIMERS'

      real    pt_timers(11), scrt_timers(11)
      common /trackingtime/ pt_timers, scrt_timers

      real   xdrange(2,3)
      common /domainrange/ xdrange
      real   xerange(2,3,lelt)
      common /elementrange/ xerange

      if(istep.eq.0)then
        call rzero(pt_timers,10)
        call rzero(scrt_timers,10)
        call domain_size(xdrange(1,1),xdrange(2,1),xdrange(1,2)
     $                  ,xdrange(2,2),xdrange(1,3),xdrange(2,3))
        ntot = lx1*ly1*lz1*nelt
        nxyz = lx1*ly1*lz1
        do ie = 1,nelt
           xerange(1,1,ie) = vlmin(xm1(1,1,1,ie),nxyz)
           xerange(2,1,ie) = vlmax(xm1(1,1,1,ie),nxyz)
           xerange(1,2,ie) = vlmin(ym1(1,1,1,ie),nxyz)
           xerange(2,2,ie) = vlmax(ym1(1,1,1,ie),nxyz)
           xerange(1,3,ie) = vlmin(zm1(1,1,1,ie),nxyz)
           xerange(2,3,ie) = vlmax(zm1(1,1,1,ie),nxyz)
        enddo  
      endif

      scrt_timers(1) = dnekclock()
      call stokes_particles
      pt_timers(1) = pt_timers(1) + dnekclock() - scrt_timers(1)
      ipttime = 200
      if(istep.eq.nsteps.or.
     &      (istep.gt.1.and.mod(istep,ipttime).eq.0))then
         ptdum = glsum(ftime,1)
         if(nid.eq.0) write(6,10)'flow solver time     ', ptdum
     &                        , ptdum/istep      
         ptdum = glsum(pt_timers(1),1)
         if(nid.eq.0) write(6,10)'stokes_particles time', ptdum
     &                        , ptdum/istep      
         ptdum = glsum(pt_timers(2),1)
         if(nid.eq.0) write(6,10)'init_stokes_ptls time', ptdum
     &                        , ptdum/istep      
         ptdum = glsum(pt_timers(3),1)
         if(nid.eq.0) write(6,10)'updt_stokes_ptls time', ptdum
     &                        , ptdum/istep      
         ptdum = glsum(pt_timers(4),1)
         if(nid.eq.0) write(6,10)'interp_u_for_adv time', ptdum
     &                        , ptdum/istep      
         ptdum = glsum(pt_timers(5),1)
         if(nid.eq.0) write(6,10)'find_pts   time      ', ptdum
     &                        , ptdum/istep
         ptdum = glsum(pt_timers(6),1)
         if(nid.eq.0) write(6,10)'crystal router time  ', ptdum
     &                        , ptdum/istep
         ptdum = glsum(pt_timers(7),1)
         if(nid.eq.0) write(6,10)'findpts_eval 3 time  ', ptdum
     &                        , ptdum/istep
         ptdum = glsum(pt_timers(8),1)
         if(nid.eq.0) write(6,10)'BDF3/EX2             ', ptdum
     &                        , ptdum/istep
         ptdum = glsum(pt_timers(9),1)
         if(nid.eq.0) write(6,10)'locate remote part   ', ptdum
     &                        , ptdum/istep
         ptdum = glsum(pt_timers(10),1)
         if(nid.eq.0) write(6,10)'serial io            ', ptdum
     &                        , ptdum/istep
         ptdum = glsum(pt_timers(11),1)
         if(nid.eq.0) write(6,10)'mpi    io            ', ptdum
     &                        , ptdum/istep
      endif
      ifxyo=.true.
      if(istep.gt.1)ifxyo=.false.
10    format(A21,1x,2(f14.7,1x))
      return
      end
c-----------------------------------------------------------------------
      subroutine userbc (ix,iy,iz,iside,eg)
c     NOTE ::: This subroutine MAY NOT be called by every process
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      integer e,eg

      ux   = -y
      uy   =  x
      uz   =  0.0
      temp =  0.0
      return
      end
c-----------------------------------------------------------------------
      subroutine useric (ix,iy,iz,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      include 'CMTDATA'
      include 'PERFECTGAS'
      integer e,eg

      temp = 1.0!sin(pi*x)
      ux   = 0.0 
      uy   = 0.0
      uz   = 0.0
      phi  = 1.0
      varsic(1) = MixtPerf_D_PRT(1.0,rgasref,temp)*phi
      varsic(2) = varsic(1)*ux
      varsic(3) = varsic(1)*uy
      varsic(4) = varsic(1)*uz
      varsic(5) = cvgref*temp*varsic(1)+
     >            0.5*(varsic(2)**2+varsic(3)**2+varsic(4)**2)/varsic(1)
      rho  = varsic(1)/phi
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat
      include 'SIZE'
      include 'TOTAL'
      include 'CMTDATA'
      include 'CMTTIMERS'
      include 'PERFECTGAS'
      integer e

      molmass    = 8314.3
      muref      = 0.0
      coeflambda = -2.0/3.0
      suthcoef   = 1.0
      reftemp    = 1.0
      prlam      = 0.72
      pinfty     = 1.0
      gmaref     = 1.4
      rgasref    = MixtPerf_R_M(molmass,dum)
      cvgref     = rgasref/(gmaref-1.0)
      cpgref     = MixtPerf_Cp_CvR(cvgref,rgasref)
      gmaref     = MixtPerf_G_CpR(cpgref,rgasref) 

      res_freq = 10000000
      flio_freq = 200

      NCUT =  int(lx1/2)
      NCUTD = lxd
      wght  = 0.2
      wghtd = 0.2
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2
      include 'SIZE'
      include 'TOTAL'
      include 'CMTDATA'
      include 'CMTBCDATA'

      outflsub=.false.
      IFCNTFILT=.false.
      ifrestart=.false.
      ifbr1=.false.
      ifvisc=.false.
      gasmodel = 1

      x0 = -1.
      x1 =  1.

      call rescale_x(xm1,x0,x1)
      call rescale_x(ym1,x0,x1)
      call rescale_x(zm1,x0,x1)
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3
      return
      end
!-----------------------------------------------------------------------
      subroutine usrflt(rmult)
      include 'SIZE'
      real rmult(lx1)

      real alpfilt, eta, etac
      integer sfilt, kut

      call rone(rmult,lx1)
      alpfilt=36.0 ! H&W 5.3
      kut=lx1/2
      sfilt=8
      etac=real(kut)/real(nx1)
      do i=kut,nx1
         eta=real(i)/real(nx1)
         rmult(i)=exp(-alpfilt*((eta-etac)/(1.0-etac))**sfilt)
      enddo
      return
      end

